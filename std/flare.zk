#-
Written by Shahryar Ahmad
23 Jun 2024
-#
import libcurl

namespace flare
{
    class response
    {
        #-
        Class to represent http response
        -#
        var content = nil
        var http_code = nil
        var content_type = nil
        function __construct__(var content,var http_code,var content_type)
        {
            #-
            desc: Constructor
            param content: a bytearray
            param http_code: a non negative integer
            param content_type: a string indicating mime type e.g "text/html"
            returns: nil
            -#
            self.content = content
            self.http_code = http_code
            self.content_type = content_type
        }
    }
    class FlareError extends Error
    {}

    function get(var url,var headers = nil)
    {
        #-
        desc: Performs a http GET request
        param url: a valid url having string type
        returns: a response object
        -#
        var curl = libcurl.curl()
        curl.setopt(libcurl.OPT_URL,url)
        curl.setopt(libcurl.OPT_FOLLOWLOCATION,1)
        curl.setopt(libcurl.OPT_WRITEFUNCTION,libcurl.WriteMemory)
        if(headers != nil)
        {
            var slist = libcurl.slist()
            foreach(var h: headers)
                slist.append(h)
            curl.setopt(libcurl.OPT_HTTPHEADER,slist)
        }
        var res = curl.perform()
        if(res != libcurl.CURLE_OK)
            throw FlareError(libcurl.strerror(res))
        var http_code = curl.getinfo(libcurl.INFO_HTTP_CODE)
        var type = curl.getinfo(libcurl.INFO_CONTENT_TYPE)
        return response(curl.data,http_code,type)
    }
    function post(var url,var data,var headers = nil)
    {
        #-
        desc: Performs a http POST request
        param url: a valid url having string type
        param data: data to post (a bytearray or a string)
        param content_type = nil: content type of posted data (nil by default)
        returns: a response object
        -#
        var curl = libcurl.curl()
        if(headers != nil)
        {
            var slist = libcurl.slist()
            foreach(var h: headers)
                slist.append(h)
            curl.setopt(libcurl.OPT_HTTPHEADER,slist)
        }
        if(typeof(data) == "String")
            data = bytes(data)
        curl.setopt(libcurl.OPT_URL,url)
        curl.setopt(libcurl.OPT_FOLLOWLOCATION,1)
        curl.setopt(libcurl.OPT_WRITEFUNCTION,libcurl.WriteMemory)
        curl.setopt(libcurl.OPT_POSTFIELDS,(data))
        curl.setopt(libcurl.OPT_POST,1)

        var res = curl.perform()
        if(res != libcurl.CURLE_OK)
            throw FlareError(libcurl.strerror(res))
        var http_code = curl.getinfo(libcurl.INFO_HTTP_CODE)
        var content_type = curl.getinfo(libcurl.INFO_CONTENT_TYPE)
        return response(curl.data,http_code,content_type)
    }
    function put(var url,var data,var headers = nil)
    {
        #-
        desc: Performs a http PUT request
        param url: a valid url having string type
        param data: data to PUT (a bytearray or a string)
        param content_type = nil: content type of data being sent(nil by default)
        returns: a response object
        -#
        var curl = libcurl.curl()
        if(headers != nil)
        {
            var slist = libcurl.slist()
            foreach(var h: headers)
                slist.append(h)
            curl.setopt(libcurl.OPT_HTTPHEADER,slist)
        }
 
        if(typeof(data) == "String")
            data = bytes(data)

        curl.setopt(libcurl.OPT_URL,url)
        curl.setopt(libcurl.OPT_FOLLOWLOCATION,1)
        curl.setopt(libcurl.OPT_WRITEFUNCTION,libcurl.WriteMemory)
        curl.setopt(libcurl.OPT_POSTFIELDS,(data))
        curl.setopt(libcurl.OPT_CUSTOMREQUEST,"PUT")

        var res = curl.perform()
        if(res != libcurl.CURLE_OK)
            throw FlareError(libcurl.strerror(res))
        var http_code = curl.getinfo(libcurl.INFO_HTTP_CODE)
        content_type = curl.getinfo(libcurl.INFO_CONTENT_TYPE)
        return response(curl.data,http_code,content_type)
    }
    function delete(var url,var headers = nil)
    {
        #-
        desc: Performs a http DELETE request
        param url: a valid url having string type
        returns: a response object
        -#
        var curl = libcurl.curl()
        if(headers != nil)
        {
            var slist = libcurl.slist()
            foreach(var h: headers)
                slist.append(h)
            curl.setopt(libcurl.OPT_HTTPHEADER,slist)
        }
 
        curl.setopt(libcurl.OPT_URL,url)
        curl.setopt(libcurl.OPT_FOLLOWLOCATION,1)
        curl.setopt(libcurl.OPT_WRITEFUNCTION,libcurl.WriteMemory)
        curl.setopt(libcurl.OPT_CUSTOMREQUEST,"DELETE")

        var res = curl.perform()
        if(res != libcurl.CURLE_OK)
            throw FlareError(libcurl.strerror(res))
        var http_code = curl.getinfo(libcurl.INFO_HTTP_CODE)
        var content_type = curl.getinfo(libcurl.INFO_CONTENT_TYPE)
        return response(curl.data,http_code,content_type)
    }
    
}
