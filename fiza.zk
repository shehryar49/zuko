#!/usr/local/bin/zuko

#-
    Fiza Package Manager for Zuko
    Written by Shahryar Ahmad
-#

import libcurl
import json

var installed_json_path = ""
var packages_json_path = ""
var module_install_path = ""
var std_install_path = ""
var local_module_install_path = ""
var local_std_install_path = ""

function setup_paths()
{
    if(@os == "Windows 64 bit" or @os == "Windows 32 bit")
    {
        installed_json_path = "C:\\zuko\\fiza\\installed.json"
        packages_json_path = "C:\\zuko\\fiza\\packages.json"
        module_install_path = "C:\\zuko\\modules"
        std_install_path = "C:\\zuko\\std"
        local_module_install_path = ".\\modules"
        local_std_install_path = ".\\std"
    }
    else
    {
        installed_json_path = "/opt/zuko/fiza/installed.json"
        packages_json_path = "/opt/zuko/fiza/packages.json"
        module_install_path = "/opt/zuko/modules"
        std_install_path = "/opt/zuko/std"
        local_module_install_path = "./modules"
        local_std_install_path = "./std"
    }
}

function update_packagelist()
{
    var c = libcurl.curl()
    var ver_str = "v"+@version
    c.setopt(libcurl.OPT_URL,"https://raw.githubusercontent.com/shehryar49/fiza/main/packages/"+ver_str+"/packages.json")
    c.setopt(libcurl.OPT_FOLLOWLOCATION,1)
    c.setopt(libcurl.OPT_WRITEFUNCTION,libcurl.WriteMemory)
    var res = c.perform()
    if(res != libcurl.CURLE_OK)
    {
        println("Error updading package list.")
        println(libcurl.strerror(res))
        return nil
    }
    var http_code = c.getinfo(libcurl.INFO_HTTP_CODE)
    if(http_code != 200)
    {
        println("Error updating package list. HTTP Code: ",http_code)
        return nil
    }
    var file = nil
    if(@os == "Windows 64 bit" or @os == "Windows 32 bit")
        file = open("C:\\zuko\\fiza\\packages.json","wb")
    else
        file = open("/opt/zuko/fiza/packages.json","wb")
    fwrite(c.data,file)
    close(file)
    println("Updated package list successfully!")
}
function clear_screen()
{
    if(@os == "Windows 64 bit" or @os == "Windows 32 bit")
        system("cls")
    else
        system("clear")
}
var size = 0
function write_memory(var bytes,var opened_file)
{
    clear_screen()
    size += len(bytes)
    println("Downloaded ",size, " bytes ")
    fwrite(bytes,opened_file)
}
function download_file(var url,var output_path)
{
    size = 0
    var opened_file = open(output_path,"wb")
    var req = libcurl.curl()
    req.setopt(libcurl.OPT_URL,url)
    req.setopt(libcurl.OPT_FOLLOWLOCATION,1)
    req.setopt(libcurl.OPT_WRITEFUNCTION,write_memory)
    req.setopt(libcurl.OPT_WRITEDATA,opened_file)
    var res = req.perform()
    if(res != libcurl.CURLE_OK)
        throw Error(libcurl.strerror(res))
    var code = req.getinfo(libcurl.INFO_HTTP_CODE)
    if(code != 200)
        throw Error("HTTP Error: "+str(code))
    close(opened_file)
}

function install_package(var package)
{
    var name = package["name"]
    var ver = "v"+package["version"]
    var download_url = package["repo"]
    var dest_path = ""
    if(@os == "Windows 32 bit" or @os == "Windows 64 bit")
    {
        # download dll from repo
        if(@os == "Windows 64 bit")
            download_url += "/releases/download/"+ver+"/"+name+"-win64.dll"
        else
            download_url += "/releases/download/"+ver+"/"+name+"-win32.dll"
        dest_path = module_install_path + "/" + name + ".dll"
        download_file(download_url,dest_path)
    }
    else # unix like systems (install from source)
    {
        download_url +=  "/archive/refs/tags/"+ver+".tar.gz"
        download_file(download_url,"fizatmp.tar.gz")
        var ret = system("mkdir fizatmp && tar -xf fizatmp.tar.gz -C fizatmp --strip-components 1")
        if(ret != 0)
            throw Error("Failed to extract archive!")
        ret = system("cd fizatmp && cmake . -DCMAKE_BUILD_TYPE=Release && make && cd ..")
        if(ret != 0)
            throw Error("Build failed.")
        dest_path = module_install_path
        var command = format("cp fizatmp/%.so %/ 2> /dev/null & cp fizatmp/%.dylib %/ 2> /dev/null",name,dest_path,name,dest_path)
        ret = system(command) 
        ret = system("rm -rf fizatmp && rm fizatmp.tar.gz")
    }
}
function remove_package(var name)
{
    if(@os == "Windows 64 bit" or @os == "Windows 32 bit")
    {
        system(format("del /F /Q C:\\zuko\\modules\\%s.dll",name))
    }
    else
    {
        system(format("rm -rf /opt/zuko/modules/%.so",name))
        system(format("rm -rf /opt/zuko/modules/%.dylib",name))
    }
}
###################

setup_paths()

if(argv == ["update"])
{
    update_packagelist()
}
else if(argv == ["list-available"])
{
    # list installed packages
    var file = open(packages_json_path,"r")
    var installed = read(file)
    installed = json.loads(installed)["available"]
    foreach(var package: installed)
        printf("% %\n",package["name"],package["version"])
    close(file)
}
else if(argv == ["list-installed"])
{
    # list available
    if(@os == "Windows 64 bit" or @os == "Windows 32 bit")
        system("dir C:\\zuko\\modules")
    else
        system("ls /opt/zuko/modules")
}
else if(len(argv) == 2 and argv[0] == "install")
{
    # install package
    var file = open(packages_json_path,"r")
    var available = read(file)
    available = json.loads(available)["available"]
    var found = false
    var idx = nil
    for(var i=0 to len(available)-1)
    {
        if(available[i]["name"] == argv[1])
        {
            found = true
            idx = i
            break
        }
    }
    if(!found)
    {
        printf("Package % not found  🤷‍🤷\nMaybe try updating the package list\n",argv[1])
        exit(1)
    }
    install_package(available[idx])
    println("[+] Installation done!  🫦🫦")
}
else if(len(argv) == 2 and argv[0] == "remove")
{
    # remove a globally installed package
    remove_package(argv[1])
}
else
{
    println("Fiza 🧕🧕 package manager") 
    println("usage: fiza <action> [package]")
    println("Examples: ")
    println("\tinstall packageName")
    println("\tremove packageName")
    println("\tupdate")
    println("\tlist-available")
    println("\tlist-installed") 
}
